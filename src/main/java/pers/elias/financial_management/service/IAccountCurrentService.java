package pers.elias.financial_management.service;

import pers.elias.financial_management.model.AccountCurrent;
import pers.elias.financial_management.model.AccountCurrentResult;
import pers.elias.financial_management.utils.PageBean;

import java.util.List;
import java.util.Map;

public interface IAccountCurrentService {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account_current
     *
     * @mbggenerated Mon Jun 21 16:54:00 CST 2021
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account_current
     *
     * @mbggenerated Mon Jun 21 16:54:00 CST 2021
     */
    int insert(AccountCurrent record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account_current
     *
     * @mbggenerated Mon Jun 21 16:54:00 CST 2021
     */
    int insertSelective(AccountCurrent record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account_current
     *
     * @mbggenerated Mon Jun 21 16:54:00 CST 2021
     */
    AccountCurrent selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account_current
     *
     * @mbggenerated Mon Jun 21 16:54:00 CST 2021
     */
    int updateByPrimaryKeySelective(AccountCurrent record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account_current
     *
     * @mbggenerated Mon Jun 21 16:54:00 CST 2021
     */
    int updateByPrimaryKey(AccountCurrent record);

    /**
     * 查询所有流水
     */
    PageBean<AccountCurrentResult> selectAllByAccountCurrent(Map<String, Object> paramMap);

    /**
     * 条件查询
     */
    List<AccountCurrentResult> selectByConditions(AccountCurrent accountCurrent);

    /**
     * 日常支出总额
     */
    List<Double> selectDailyExpense(AccountCurrent accountCurrent);

    /**
     * 月支出总额
     */
    List<Double> selectMonthlyExpense(AccountCurrent accountCurrent);

    /**
     * 年支出总额
     */
    List<Double> selectYearlyExpense(AccountCurrent accountCurrent);

    /**
     * id 查询
     */
    AccountCurrentResult selectById(Integer id);
}
